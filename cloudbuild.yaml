steps:
  # Step 1: Restore, Publish and Package .NET App
  - name: 'mcr.microsoft.com/dotnet/sdk:7.0'
    id: 'Build & Package .NET App'
    entrypoint: bash
    args:
      - -c
      - |
        dotnet restore MyApp.csproj
        dotnet publish MyApp.csproj -c Release -o publish
        dotnet pack MyApp.csproj -o packages

  # Step 2: Upload .nupkg to Cloud Storage
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'Upload .nupkg to GCS'
    args:
      - bash
      - -c
      - |
        gsutil cp packages/*.nupkg gs://my-dotnet-packages/

  # Step 3: Build Docker image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build Docker Image'
    args:
      [
        'build',
        '-t',
        'asia-south1-docker.pkg.dev/onyx-antler-459216-j6/dotnet-repo/myapp:latest',
        '.'
      ]

  # Step 4: Push image to Artifact Registry (Create or Update)
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push Docker Image'
    args:
      [
        'push',
        'asia-south1-docker.pkg.dev/onyx-antler-459216-j6/dotnet-repo/myapp:latest'
      ]

  # Step 5: Deploy to Cloud Run with unauthenticated access
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'Deploy to Cloud Run'
    args:
      [
        'gcloud', 'run', 'deploy', 'dotnet-app',
        '--image', 'asia-south1-docker.pkg.dev/onyx-antler-459216-j6/dotnet-repo/myapp:latest',
        '--region', 'asia-south1',
        '--platform', 'managed',
        '--allow-unauthenticated',
        '--port', '8080'
      ]

images:
  - asia-south1-docker.pkg.dev/onyx-antler-459216-j6/dotnet-repo/myapp:latest

options:
  logging: CLOUD_LOGGING_ONLY
